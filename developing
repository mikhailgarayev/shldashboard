<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <title>SUMO Dashboard</title>
    <link rel="icon" type="image/png" href="favicon.png" />
    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Bootstrap-Select CSS –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ dropdown -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/css/bootstrap-select.min.css" />
    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Bootstrap Icons –¥–ª—è –∏–∫–æ–Ω–æ–∫ -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
      /* ========= –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã (–≤–æ–ª—å—Ç–æ–≤—Å–∫–∏–µ –≥–æ–ª—É–±—ã–µ —Ç–æ–Ω–∞) ========= */
      :root {
        --bg-color: #f0f8ff;
        --text-color: #343a40;
        --card-bg-color: #ffffff;
        --card-text-color: #495057;
        --card-border-color: #dee2e6;
        --card-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        --card-hover-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);

        --menu-bg-color: #007bff;
        --menu-width: 250px;
        --transition-speed: 0.3s;
      }
      body.dark-theme {
        --bg-color: linear-gradient(120deg, #2a2a2a 0%, #3c3a3c 100%);
        --text-color: #f0f0f0;
        --card-bg-color: #3a3a3a;
        --card-text-color: #e5e5e5;
        --card-border-color: #555555;
        --card-shadow: 0 4px 16px rgba(255, 255, 255, 0.08);
        --card-hover-shadow: 0 6px 20px rgba(255, 255, 255, 0.12);
        --menu-bg-color: #3a3a3a;
      }
      /* ========= –û–±—â–∏–π —Å–±—Ä–æ—Å –∏ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ ========= */
      html,
      body {
        margin: 0;
        padding: 0;
        width: 100%;
        min-height: 100vh;
        background: var(--bg-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        overflow-x: hidden;
        color: var(--text-color);
        transition: background var(--transition-speed) ease, color var(--transition-speed) ease;
      }
      body.hidden { display: none; }
      .header-bar {
        position: relative;       /* –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        height: 60px;            /* —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É */
        background-color: #f0f8ff; /* –≥–æ–ª—É–±–æ–π/–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π/–ª—é–±–æ–π */
        border-bottom: 1px solid #dee2e6;
        /* –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å display:flex; align-items:center; –Ω–æ —Ç–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–º–µ—â–∞—Ç—å –∏–∫–æ–Ω–∫—É/—Ç–µ–∫—Å—Ç */
      }

      /* –ö–Ω–æ–ø–∫–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ */
      .hamburger-btn {
        position: absolute;
        left: 16px;              /* –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
        top: 50%;                /* —Å—Ç–∞–≤–∏–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É —Ä–æ–¥–∏—Ç–µ–ª—è */
        transform: translateY(-50%); /* —Å–º–µ—â–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã—Å–æ—Ç—ã, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å */
        border: none;
        background: transparent;
        cursor: pointer;
        outline: none;
      }
      .hamburger-btn i {
        font-size: 1.4rem;       /* —Ä–∞–∑–º–µ—Ä —Å–∞–º–æ–π –∏–∫–æ–Ω–∫–∏ */
      }

      /* –ë–ª–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ */
      .title-container {
        position: absolute; 
        top: 50%;                /* –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É */
        transform: translateY(-50%);
        left: 60px;             /* —á—Ç–æ–±—ã –Ω–µ –Ω–∞–µ–∑–∂–∞—Ç—å –Ω–∞ –∏–∫–æ–Ω–∫—É */
        background-color: #fff;
        padding: 8px 16px;      /* –æ—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –±–µ–ª–æ–≥–æ –±–ª–æ–∫–∞ */
        border-radius: 4px;     /* —á—É—Ç—å —Å–∫—Ä—É–≥–ª–∏–º —É–≥–ª—ã */
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
      }
      .title-container h1 {
        margin: 0;
        font-size: 1.3rem;
        font-weight: 500;
      }
      /* ========= –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (Sidebar) ‚Äì —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–µ–≤–∞ ========= */
      #sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: var(--menu-width);
        height: 100%;
        background: var(--menu-bg-color);
        padding-top: 20px;
        z-index: 1099;
      }

      .toggle-btn {
        position: absolute !important;
        top: 10px !important; 
        right: 10px !important;
        margin: 0;
        padding: 6px 8px;
        cursor: pointer;
        background-color: transparent;
      }
      .toggle-btn i {
        font-size: 1.25rem;
      } 

      /* –ù–æ–≤—ã–π –±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É */
      .user-info {
        text-align: center;
        padding: 10px 20px;
        border-bottom: 1px solid var(--card-border-color);
        margin-bottom: 10px;
      }
      .user-info #user-display-name {
        font-weight: 600;
        font-size: 1rem;
        color: #fff;
      }
      .user-info #logout-btn {
        margin-top: 8px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .user-info #logout-btn img {
        width: 16px;
        height: 16px;
        margin-right: 5px;
      }
      /* sidebar ‚Äî –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ */
      #sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100%;
        background: #007bff; /* –ø—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç–∞ */
        z-index: 1099;
        /* –µ—Å–ª–∏ sidebar –∏–º–µ–µ—Ç –ª–æ–≥–∏–∫—É —Å–∫—Ä—ã—Ç–∏—è, –¥–æ–±–∞–≤—å—Ç–µ transition –∏ —Ç.–¥. */
      }

      /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ –º–µ–Ω—é */
      #sidebar a.nav-link {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 12px 20px;
        font-size: 1rem;
        color: #fff;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        text-decoration: none;
        transition: background 0.2s;
      }
      #sidebar a.nav-link:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateX(4px);
        border-radius: 6px;
      }

      /* –°—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ */
      .sidebar-divider {
        border-top: 1px solid rgba(255,255,255,0.2);
        margin: 0;
        width: 100%;
      }

      /* –®–∞–ø–∫–∞ —Å–∞–π–¥–±–∞—Ä–∞ */
      .sidebar-header {
        /* —Ñ–æ–Ω, –æ—Ç—Å—Ç—É–ø—ã —É–∂–µ —É–∫–∞–∑–∞–Ω—ã inline, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç—É—Ç */
      }

      /* –ö–Ω–æ–ø–∫–∞‚Äë–≥–∞–º–±—É—Ä–≥–µ—Ä –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */
      #toggle-sidebar {
        /* –ú–æ–∂–Ω–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç–∞, –æ—Ç—Å—Ç—É–ø—ã */
      }

      /* –ö–Ω–æ–ø–∫–∞ Log Out */
      #logout-btn i {
        font-size: 1rem;  /* —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ */
      }
      /* –°—Å—ã–ª–∫–∏ —Å–∞–π–¥–±–∞—Ä–∞ */
      #sidebar a {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 12px 20px;
        font-size: 1rem;
        color: #fff;
        border-bottom: 1px solid var(--card-border-color);
        text-decoration: none;
        transition: background var(--transition-speed);
      }
      #sidebar a:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateX(4px);
        border-radius: 6px;
      }

      /* ========= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ========= */
      #main-content {
        margin-left: var(--menu-width);
        padding: 20px;
        box-sizing: border-box;
      }

      /* ========= –•–µ–¥–µ—Ä ========= */
      .dashboard-header {
        background: var(--card-bg-color);
        border-bottom: 1px solid var(--card-border-color);
        box-shadow: var(--card-shadow);
        border-radius: 0 0 12px 12px;
        position: sticky;
        top: 0;
        z-index: 100;
        padding: 10px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .hamburger-menu { display: none; }

      /* ========= –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã, –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ========= */
      .refresh-section {
        display: flex;
        align-items: center;
        gap: 8px;
      }
      .refresh-btn {
        padding: 6px 10px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .refresh-btn:hover { background-color: #218838; }
      .spinner-border { width: 1rem; height: 1rem; border-width: 0.1em; }
      .theme-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
      }
      .theme-switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 24px;
      }
      .slider:before {
        position: absolute;
        content: "‚òÄÔ∏è";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
        font-size: 12px;
        line-height: 18px;
        text-align: center;
        color: #f39c12;
      }
      input:checked + .slider {
        background-color: #007bff;
      }
      input:checked + .slider:before {
        transform: translateX(26px);
        content: "üåô";
        color: #f1c40f;
      }

      /* ========= –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (collapse) ========= */
      #filter-panel { margin-bottom: 20px; }
      .filter-card {
        border: 1px solid var(--card-border-color);
        background: var(--card-bg-color);
        border-radius: 8px;
        box-shadow: var(--card-shadow);
      }
      .filter-card .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background: var(--card-bg-color);
        border-bottom: 1px solid var(--card-border-color);
      }

      /* ========= –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ========= */
      .info-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        margin-top: 1rem;
        margin-bottom: 1rem;
      }
      .stats-card {
        padding: 10px 15px;
        background: var(--bg-color);
        border-radius: 8px;
        border: 1px solid var(--card-border-color);
        min-width: 180px;
      }
      .stats-title { font-size: 0.9rem; opacity: 0.7; }
      .stats-value { font-weight: bold; font-size: 1.2rem; margin-top: 4px; }

      /* ========= –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º ========= */
      .platforms-row {
        display: flex;
        flex-wrap: nowrap;
        align-items: flex-start;
        justify-content: space-between;
        overflow-x: auto;
        gap: 10px;
      }
      .platform-card {
        flex: 1 1 220px;
        min-width: 220px;
        background: var(--card-bg-color);
        color: var(--card-text-color);
        border-radius: 16px;
        padding: 20px;
        box-shadow: var(--card-shadow);
        transition: transform 0.2s, box-shadow 0.2s;
        overflow-wrap: break-word;
      }
      .platform-card:hover { transform: translateY(-3px); box-shadow: var(--card-hover-shadow); }
      .platform-card h5 {
        text-align: center;
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 12px;
        color: var(--text-color);
      }
      .platform-card h5 a { color: var(--text-color); text-decoration: none; }
      .platform-card h5 a:hover { text-decoration: underline; }
      .platform-card h5 .info-icon {
        display: inline-block;
        margin-left: 5px;
        cursor: pointer;
        font-size: 0.9rem;
      }
      .platform-card p {
        text-align: center;
        margin: 10px 0;
        font-size: 0.85rem;
        color: #6c757d;
      }
      .platform-card ul {
        list-style: none;
        padding-left: 0;
        font-size: 0.85rem;
        color: var(--card-text-color);
      }
      .platform-card ul li {
        padding: 4px 0;
        cursor: pointer;
        border-bottom: 1px solid var(--card-border-color);
      }
      .platform-card ul li:last-child { border-bottom: none; }

      /* ========= –°–µ–∫—Ü–∏—è Shift Summary ========= */
      .shift-summary-card {
        background: var(--card-bg-color);
        color: var(--card-text-color);
        border: none;
        box-shadow: none;
        padding: 20px;
        margin: 0 auto 40px;
        text-align: center;
        font-size: 1.2rem;
        font-weight: 700;
      }
      .shift-summary-title {
        margin-bottom: 16px;
        font-weight: 600;
        font-size: 1.3rem;
        color: var(--text-color);
      }
      .shift-summary-grid {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        font-size: 0.85rem;
      }
      .shift-summary-grid th,
      .shift-summary-grid td {
        padding: 8px 12px;
        text-align: center;
      }
      .small-font-card { font-size: 0.9rem; }
      .shift-card-title {
        font-size: 1.4rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        text-align: center;
      }
      .shift-card-away {
        font-size: 1.1rem;
        color: #666;
        text-align: center;
      }

      /* ========= –°–µ–∫—Ü–∏—è Breaks ========= */
      #breaks-section {
        margin-top: 40px;
      }
      #breaks-section h2 {
        text-align: center;
        margin-bottom: 20px;
        font-weight: 500;
        font-size: 1.5rem;
        color: var(--text-color);
      }
      .break-card {
        background: var(--card-bg-color);
        color: var(--card-text-color);
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        padding: 20px;
        margin: 0 auto 40px;
        max-width: 600px;
        text-align: center;
      }
      .break-card:hover { transform: translateY(-3px); box-shadow: var(--card-hover-shadow); }
      .break-card h5 {
        margin-bottom: 12px;
        font-weight: 600;
        font-size: 1.1rem;
        color: var(--text-color);
      }
      .break-card ul {
        list-style: none;
        padding-left: 0;
        font-size: 0.85rem;
        color: var(--card-text-color);
      }
      .break-card ul li {
        padding: 6px 0;
        border-bottom: 1px solid var(--card-border-color);
      }
      .break-card ul li:last-child { border-bottom: none; }

      /* ========= –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ========= */
      #modal-overlay {
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }
      #modal-overlay.show {
        opacity: 1;
        pointer-events: auto;
      }
      #employee-modal {
        opacity: 0;
        transform: translateX(-50%) scale(0.95);
        transition: opacity 0.3s ease, transform 0.3s ease;
        position: fixed;
        top: 20%;
        left: 50%;
        background: var(--card-bg-color);
        color: var(--card-text-color);
        border: 1px solid var(--card-border-color);
        box-shadow: var(--card-shadow);
        border-radius: 8px;
        padding: 20px;
        z-index: 1001;
        width: 330px;
        pointer-events: none;
      }
      #employee-modal.show {
        opacity: 1;
        transform: translateX(-50%) scale(1);
        pointer-events: auto;
      }
      #employee-modal .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--card-border-color);
      }
      #employee-modal .modal-header h5 { margin: 0; }
      #employee-modal .close-btn { cursor: pointer; font-size: 1.5rem; }
      #employee-modal .modal-body { margin-top: 15px; }
      .modal-body .info-row {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      .modal-body .info-row i {
        margin-right: 10px;
        color: var(--text-color);
      }
      #employee-modal .modal-footer { margin-top: 20px; text-align: right; }
      .break-overdue {
        color: #dc3545;
        font-weight: bold;
        animation: pulse 1s infinite;
      }
      @keyframes pulse {
        0% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.6; transform: scale(1.05); }
        100% { opacity: 1; transform: scale(1); }
      }
      .employee-item.king .employee-name {
        color: gold !important;
        font-weight: bold;
      }
      /* –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ .hidden-sidebar –ø–µ—Ä–µ–º–µ—â–∞–µ–º sidebar –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞ */
      #sidebar.hidden-sidebar {
        left: -250px;
        transition: left 0.3s ease;
      }

      /* –ü—Ä–∏ —Å–∫—Ä—ã—Ç–æ–º sidebar –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è (margin-left: 0) */
      #main-content.full-width {
        margin-left: 0 !important;
        transition: margin-left 0.3s ease;
      }

      /* ========= –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã –∏ —Ç.–¥.) ========= */
      .theme-text { margin: 0; padding: 0; line-height: 1; font-size: 1rem; }
      .theme-toggle-container { display: inline-flex; align-items: center; gap: 6px; }
      .theme-switch { position: relative; display: inline-block; width: 50px; height: 24px; }
      .theme-switch input { opacity: 0; width: 0; height: 0; }
      .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; transition: 0.4s; border-radius: 24px; }
      .slider:before { position: absolute; content: "‚òÄÔ∏è"; height: 18px; width: 18px; left: 3px; bottom: 3px; background-color: white; transition: 0.4s; border-radius: 50%; font-size: 12px; line-height: 18px; text-align: center; color: #f39c12; }
      input:checked + .slider { background-color: #007bff; }
      input:checked + .slider:before { transform: translateX(26px); content: "üåô"; color: #f1c40f; }
    </style>
    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Firebase -->
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth-compat.js"></script>
    <script>
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
      const firebaseConfig = {
        apiKey: "AIzaSyAHyxC12UaO6QU_nCiWFnegul1Vix5skm8",
        authDomain: "shldashboard.firebaseapp.com",
        projectId: "shldashboard",
        storageBucket: "shldashboard.firebasestorage.app",
        messagingSenderId: "362566153595",
        appId: "1:362566153595:web:ee35c2588bd0f798e6f9de"
      };
      firebase.initializeApp(firebaseConfig);
      const auth = firebase.auth();

      // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö email
      const allowedEmails = [
        "mikhail.garayev@wolt.com",
        "elshan.tahmazov@wolt.com",
        "inara.mammadzada@wolt.com",
        "mayya.mirzayeva@wolt.com",
        "mikayil.alizada@wolt.com",
        "pasha.chiragov@wolt.com",
        "rahim.mammadov@wolt.com",
        "toghrul.mirzali@wolt.com",
        "amaliya.rizvanova@wolt.com",
        "anar.mikayilov@wolt.com",
        "arif.guliyev@wolt.com",
        "farid.hajiyev@wolt.com",
        "naziya.orujova@wolt.com",
        "rafig.huseynov@wolt.com",
        "sama.akbarzadegan@wolt.com",
        "mursal.askarov@wolt.com"
      ];

      auth.onAuthStateChanged((user) => {
        if (!user || !allowedEmails.includes(user.email)) {
          window.location.replace("login.html");
        } else {
          document.getElementById("user-display-name").textContent =
            user.displayName || user.email;
          document.body.classList.remove("hidden");
        }
      });

      document.addEventListener("DOMContentLoaded", () => {
        const logoutBtn = document.getElementById("logout-btn");
        logoutBtn.addEventListener("click", () => {
          auth.signOut();
        });
      });
    </script>
  </head>
  <body class="hidden">
    <!-- ========= –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (Sidebar) —Å –Ω–æ–≤—ã–º –±–ª–æ–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Ä—Ö—É ========= -->
    <nav id="sidebar">
      <!-- –®–∞–ø–∫–∞ —Å–∞–π–¥–±–∞—Ä–∞ (–∏–∫–æ–Ω–∫–∞-–≥–∞–º–±—É—Ä–≥–µ—Ä –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) -->
      <div class="sidebar-header d-flex flex-column align-items-center pb-2 pt-3 px-3">
        <!-- –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π-–≥–∞–º–±—É—Ä–≥–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∞ -->
        <div class="align-self-end">
          <button id="toggle-sidebar" class="btn btn-sm btn-outline-light">
            <i class="bi bi-list"></i>
          </button>
        </div>
    
        <!-- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–Ω—Ç—Ä—É -->
        <h6 id="user-display-name" class="text-white mt-2 mb-1" style="font-weight: 600;">
          Mikhail Garayev
        </h6>
    
        <!-- –ö–Ω–æ–ø–∫–∞ Log Out -->
        <button
          id="logout-btn"
          class="btn btn-sm btn-outline-light"
          style="display: flex; align-items: center; gap: 6px;"
        >
          <i class="bi bi-box-arrow-right"></i> Log Out
        </button>
      </div>
    
      <!-- –¢–æ–Ω–∫–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) -->
      <hr class="sidebar-divider my-0" />
    
      <!-- –°—Å—ã–ª–∫–∏ –º–µ–Ω—é -->
      <a href="#" class="nav-link"><i class="bi bi-speedometer2"></i> Dashboard</a>
      <a href="https://example.com" target="_blank" class="nav-link"><i class="bi bi-bar-chart-line"></i> YIGIM Dashboard</a>
      <a href="https://anotherexample.com" target="_blank" class="nav-link"><i class="bi bi-graph-up"></i> Datadog Dashboard</a>
      <a href="https://yetanother.com" target="_blank" class="nav-link"><i class="bi bi-building"></i> City States</a>
      <a href="https://yetanother.com" target="_blank" class="nav-link"><i class="bi bi-tools"></i> City Tools</a>
      <a href="https://yetanother.com" target="_blank" class="nav-link"><i class="bi bi-layout-text-sidebar-reverse"></i> Converse Admin Panel</a>
    </nav>
    
    <!-- ========= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ========= -->
    <div id="main-content">
      <!-- –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ -->
      <button id="show-sidebar" class="btn btn-sm btn-outline-primary" 
      style="position: fixed; top: 10px; left: 10px; z-index: 1100; display: none; border-radius: 50%;">
      <i class="bi bi-list"></i>
      </button>

      <!-- –•–µ–¥–µ—Ä -->
      <header class="dashboard-header d-flex flex-wrap align-items-center justify-content-between gap-3 px-3 py-2">
        <div class="d-flex align-items-center gap-3">
          <h1 class="mb-0" style="font-size:1.3rem;">Support Monitoring Dashboard</h1>
        </div>
        <div class="d-flex align-items-center gap-3">
          <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ö–µ–¥–µ—Ä–µ -->
          <div class="d-flex align-items-center gap-2">
            <span>Theme:</span>
            <label class="theme-switch mb-0">
              <input type="checkbox" id="theme-checkbox" />
              <span class="slider"></span>
            </label>
          </div>
          <div class="refresh-section d-flex align-items-center gap-2">
            <span id="timer-label">Refresh in: <span id="countdown">15</span>s</span>
            <div style="width:18px; height:18px; display:flex; align-items:center; justify-content:center;">
              <div id="refresh-spinner" class="spinner-border text-primary" role="status" style="display:none;">
                <span class="sr-only">Loading...</span>
              </div>
            </div>
            <button class="refresh-btn btn btn-sm btn-success" onclick="refreshNow()">Refresh now</button>
          </div>
        </div>
      </header>

      <!-- –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (collapse) -->
      <div id="filter-panel" class="mt-3">
        <div class="card filter-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="bi bi-funnel-fill"></i> –§–∏–ª—å—Ç—Ä—ã</span>
            <button class="btn btn-sm btn-outline-primary" type="button" data-toggle="collapse" data-target="#filtersCollapse" aria-expanded="true" aria-controls="filtersCollapse">
              <i class="bi bi-chevron-up"></i>
            </button>
          </div>
          <div class="collapse show" id="filtersCollapse">
            <div class="card-body">
              <div class="form-row">
                <div class="form-group col-md-2">
                  <label for="status-filter">Status</label>
                  <select id="status-filter" class="form-control filter-dropdown">
                    <option value="both">Both</option>
                    <option value="active">Active</option>
                    <option value="away">Away</option>
                  </select>
                </div>
                <div class="form-group col-md-3">
                  <label for="platform-dropdown">Platform</label>
                  <select id="platform-dropdown" class="selectpicker filter-dropdown" multiple data-live-search="true" title="Platform" data-width="100%">
                    <option value="all" selected>All platforms</option>
                    <option value="CS">CS</option>
                    <option value="CS/Post order">CS/Post order</option>
                    <option value="PSR">PSR</option>
                    <option value="SiMo">SiMo</option>
                    <option value="Aircall">Aircall</option>
                    <option value="Venue">Venue</option>
                    <option value="Trainee">Trainee</option>
                    <option value="ST">ST</option>
                  </select>
                </div>
                <div class="form-group col-md-2">
                  <label for="realloc-filter">Reallocate</label>
                  <select id="realloc-filter" class="form-control filter-dropdown">
                    <option value="all">All</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select>
                </div>
                <div class="form-group col-md-2">
                  <label for="lang-filter">Language</label>
                  <select id="lang-filter" class="form-control filter-dropdown">
                    <option value="all">All</option>
                    <option value="two">Bilingual</option>
                    <option value="three">Trilingual</option>
                  </select>
                </div>
                <div class="form-group col-md-3">
                  <label for="break-filter">Breaks</label>
                  <select id="break-filter" class="form-control filter-dropdown">
                    <option value="upcoming">Upcoming</option>
                    <option value="all">All</option>
                  </select>
                </div>
              </div>
              <div class="form-group">
                <label for="employee-search">Search</label>
                <input type="text" id="employee-search" class="form-control search-input" placeholder="Search employee..." />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (Weather –∏ –¥—Ä.) -->
      <div class="info-cards">
        <div class="stats-card" id="weather-card">
          <span class="stats-title">Baku Weather</span>
          <span class="stats-value" id="baku-temp">-- ¬∞C</span>
          <br />
          <span class="stats-title">Wind Speed</span>
          <span class="stats-value" id="baku-wind">-- m/s</span>
        </div>
        <div class="stats-card">
          <div class="stats-title">Baku Central</div>
          <div class="stats-value" style="color: #218838;">1034/1027(1.02)</div>
          <div class="stats-value" style="color: #888;">PuE: 8 min</div>
        </div>
        <div class="stats-card">
          <div class="stats-title">Ganja</div>
          <div class="stats-value" style="color: #f39c12;">100/234 (2.4)</div>
          <div class="stats-value" style="color: #888;">PuE: 8 min</div>
        </div>
        <div class="stats-card">
          <div class="stats-title">Lankaran</div>
          <div class="stats-value" style="color: #dc3545;">15/10 (3.0)</div>
          <div class="stats-value" style="color: #888;">PuE: 8 min</div>
        </div>
        <div class="stats-card">
          <div class="stats-title">Mingachevir</div>
          <div class="stats-value" style="color: #888;">Disabled</div>
        </div>
        <div class="stats-card">
          <div class="stats-title">Nakchivan</div>
          <div class="stats-value" style="color: #888;">Disabled</div>
        </div>
      </div>

      <!-- Shift Summary -->
      <div id="shift-summary" class="shift-summary-card">
        <div class="shift-summary-title">Metrics per platform</div>
        <table class="shift-summary-grid" id="summary-table"></table>
      </div>

      <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º -->
      <div id="platforms-container" class="platforms-row"></div>

      <!-- Breaks Section -->
      <div id="breaks-section">
        <h2><i class="bi bi-clock-fill"></i> Breaks</h2>
        <div id="breaks-app"></div>
      </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ -->
    <div id="modal-overlay"></div>
    <div id="employee-modal">
      <div class="modal-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
          <img
            id="modal-emp-avatar"
            src="https://i.ibb.co/YrbxqCn/favicon.jpg"
            alt="Avatar"
            style="width:60px; height:60px; border-radius:50%; margin-right:15px;"
          />
          <div>
            <h5 id="modal-emp-name" style="margin:0; font-weight:600;">Employee Name</h5>
            <small id="modal-emp-email" style="color:#888;">employee.email@wolt.com</small>
          </div>
        </div>
        <span class="close-btn" id="modal-close" style="cursor:pointer; font-size:24px; color:#999;">
          <i class="bi bi-x-lg"></i>
        </span>
      </div>
      <div class="modal-body" style="padding:15px 20px 0 20px;">
        <div class="info-row mb-2"><i class="bi bi-briefcase-fill"></i> <strong>Role:</strong> <span id="modal-emp-role">Support Associate</span></div>
        <div class="info-row mb-2"><i class="bi bi-building"></i> <strong>Prime platform:</strong> <span id="modal-emp-prime">CS</span></div>
        <div class="info-row mb-2"><i class="bi bi-heart"></i> <strong>Preferred platform:</strong> <span id="modal-emp-pref">PSR</span></div>
        <div class="info-row mb-2"><i class="bi bi-arrow-repeat"></i> <strong>Can reallocate?:</strong> <span id="modal-emp-realloc">Yes</span></div>
        <div class="info-row mb-2"><i class="bi bi-translate"></i> <strong>Language:</strong> <span id="modal-emp-languages">AZ RUGB</span></div>
        <div class="info-row mb-2"><i class="bi bi-speedometer2"></i> <strong>Capacity:</strong> <span id="modal-emp-capacity">‚Äî</span></div>
        <div class="info-row mb-2"><i class="bi bi-watch"></i> <strong>Shift:</strong> <span id="modal-emp-shift">‚Äî</span></div>
        <div class="info-row mb-2"><i class="bi bi-cup-fill"></i> <strong>Break:</strong> <span id="modal-emp-break">‚Äî</span></div>
      </div>
      <div class="modal-footer" style="padding:20px; text-align:right;">
        <button id="modal-inbox-link" class="btn btn-primary mr-2"><i class="bi bi-chat-right-dots"></i> Open Inbox</button>
        <button id="modal-admin-link" class="btn btn-outline-primary"><i class="bi bi-gear-fill"></i> Admin Panel</button>
      </div>
      <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º jQuery, Bootstrap JS –∏ Bootstrap-Select –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) -->
    </div>

    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º jQuery –∏ Bootstrap (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ!) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/js/bootstrap-select.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth-compat.js"></script>
    <script>
      /* ===============================
         –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: —Ä–∞–±–æ—Ç–∞ —Å Weather, Google Sheets, Aircall, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ç.–¥.
      =============================== */
      const OPENWEATHER_API_KEY = "f97220cfb6bcefa391405990e7b9825d";
      const CITY_NAME = "Baku,AZ";
      async function fetchWeather() {
        const cacheKey = "bakuWeatherData";
        const cacheTimeKey = "bakuWeatherTimestamp";
        const now = Date.now();
        const cacheTTL = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

        const cachedData = localStorage.getItem(cacheKey);
        const cachedTimestamp = localStorage.getItem(cacheTimeKey);

        if (cachedData && cachedTimestamp && now - cachedTimestamp < cacheTTL) {
          const data = JSON.parse(cachedData);
          updateWeatherUI(data);
          return;
        }

        const url = `https://api.openweathermap.org/data/2.5/weather?q=${CITY_NAME}&units=metric&appid=${OPENWEATHER_API_KEY}`;
        try {
          const res = await fetch(url);
          if (!res.ok) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: " + res.statusText);
            return;
          }
          const data = await res.json();
          localStorage.setItem(cacheKey, JSON.stringify(data));
          localStorage.setItem(cacheTimeKey, now);
          updateWeatherUI(data);
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: " + err);
        }
      }
      function updateWeatherUI(data) {
        const temperature = data.main?.temp ?? null;
        const windSpeed = data.wind?.speed ?? null;
        let weatherEmoji = "";
        if (data.weather && data.weather.length > 0) {
          const condition = data.weather[0].main;
          switch (condition) {
            case "Clear": weatherEmoji = "‚òÄÔ∏è"; break;
            case "Clouds": weatherEmoji = "‚òÅÔ∏è"; break;
            case "Rain":
            case "Drizzle": weatherEmoji = "üåßÔ∏è"; break;
            case "Thunderstorm": weatherEmoji = "‚õàÔ∏è"; break;
            case "Snow": weatherEmoji = "‚ùÑÔ∏è"; break;
            default: weatherEmoji = ""; break;
          }
        }
        document.getElementById("baku-temp").textContent = temperature ? `${Math.round(temperature)} ¬∞C ${weatherEmoji}` : "-- ¬∞C";
        document.getElementById("baku-wind").textContent = windSpeed ? `${windSpeed} m/s` : "-- m/s";
      }
      const SPREADSHEET_ID = "1dICKOxxz9R3x8MY3FKQ9I-IwR9fBUDfMOT9PFDLloAE";
      const SHIFT_RANGE = "list1!AT5:BH47";
      const RANGE = "list1!A1:BJ100";
      const RESPONSIBLES_RANGE = "list1!B5:C27";
      const BREAKS_RANGE = "prebreaks!A1:D40";
      const GOOGLE_API_KEY = "AIzaSyBVHrKvA61CAJBLxU-4AAiow6Y0TV4ChSY";

      let fetchedData = null;
      let currentSearchTerm = "";
      let currentStatusFilter = "both";
      let currentPlatformFilter = ["all"];
      let currentReallocFilter = "all";
      let currentLangFilter = "all";
      let currentBreakFilter = "upcoming";

      let employeeData = {};

      const platforms = [
        { name: "CS", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=6643245bfadf62c6edc28feb", colIndexNames: 3, colIndexData: 4, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "CS/Post order", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=664324a0510ac011feaa798c", colIndexNames: 5, colIndexData: 6, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "PSR", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=6567a44af7d470550b11dc68", colIndexNames: 7, colIndexData: 8, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "SiMo", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=6668088fc6d870f3cfd61653", colIndexNames: 9, colIndexData: 10, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "Aircall", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=671a26a2a5b9ae4a2ca603fb", colIndexNames: 11, colIndexData: 12, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "Venue", url: "https://ops.wolt.com/support/converse/conversations?conversationListId=666807fc28b3f1231948f407", colIndexNames: 13, colIndexData: 14, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "Trainee", url: "https://wolt.com/", colIndexNames: 15, colIndexData: 16, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 },
        { name: "ST", url: "https://wolt.com/", colIndexNames: 17, colIndexData: 18, rowActiveNamesStart: 4, rowActiveNamesEnd: 27, rowAwayNamesStart: 28, rowAwayNamesEnd: 47 }
      ];

      let aircallActive = [];
      let aircallAway = [];

      const platformInfo = {
        "CS": "Click on the link to open the CS platform.\nClick on employee name to open their profile.",
        "CS/Post order": "Click on the link to open the CS PO AZE platform.\nClick on employee name to open their profile.",
        "PSR": "Click on the link to open the PSR platform.\nClick on employee name to open their profile.",
        "SiMo": "Click on the link to open the Support Inbox.\nClick on employee name to open their profile.",
        "Aircall": "Click on the link to open the Aircall platform.\nClick on employee name to open their profile.",
        "Venue": "Click on the link to open the Venue platform.\nClick on employee name to open their profile.",
        "Trainee": "Click on employee name to open their profile.",
        "ST": "Click on employee name to open their profile."
      };

      function logDebug(message) { console.log(message); }

      async function fetchSheetData(range) {
        const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${encodeURIComponent(range)}?key=${GOOGLE_API_KEY}`;
        try {
          const res = await fetch(url);
          if (!res.ok) { logDebug("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + res.statusText); return null; }
          const data = await res.json();
          return data.values;
        } catch (err) { logDebug("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + err); return null; }
      }
      async function fetchEmployeeList() {
        const data = await fetchSheetData("emplist!A1:G");
        if (!data || data.length < 2) return;
        for (let i = 1; i < data.length; i++) {
          const row = data[i];
          if (!row[0]) continue;
          const empName = row[0].trim();
          const empId = row[1]?.trim() || "";
          const canRealloc = row[2]?.trim() || "";
          const primePlatform = row[3]?.trim() || "";
          const preferredPlatform = row[4]?.trim() || "";
          const languages = row[5]?.trim() || "";
          employeeData[empName] = {
            id: empId,
            canReallocate: canRealloc,
            prime: primePlatform,
            pref: preferredPlatform,
            languages: languages,
            capacity: row[6]?.trim() || "N/A"
          };
        }
      }
      function generateInboxLink(empId) {
        return "https://ops.wolt.com/support/converse/users/conversations?assigneeIds=" + encodeURIComponent(empId);
      }
      function generateAdminLink(empId) {
        return "https://ops.wolt.com/support/converse/admin/users?userId=" + encodeURIComponent(empId);
      }
      function openEmployeeModal(empName) {
        const info = employeeData[empName];
        if (!info) { logDebug("–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: " + empName); return; }
        let shift = "‚Äî";
        if (window.allShiftData && Array.isArray(window.allShiftData)) {
          for (const row of window.allShiftData) {
            for (const cell of row) {
              if (typeof cell === "string" && cell.toLowerCase().includes(empName.toLowerCase())) {
                const dashindex = cell.lastIndexOf(" - ");
                shift = dashindex !== -1 ? cell.substring(0, dashindex).trim() : cell.trim();
                break;
              }
            }
            if (shift !== "‚Äî") break;
          }
        }
        let breakTime = "‚Äî";
        if (window.allBreaksData && Array.isArray(window.allBreaksData)) {
          const foundBreak = allBreaksData.find(b => b["Name"]?.trim().toLowerCase() === empName.trim().toLowerCase());
          if (foundBreak) { breakTime = foundBreak["Break Time"] || "‚Äî"; }
        }
        document.getElementById("modal-emp-break").textContent = breakTime;
        document.getElementById("modal-emp-shift").textContent = shift;
        const parts = empName.trim().split(" ");
        const email = parts.length >= 2 ? `${parts[0].toLowerCase()}.${parts[1].toLowerCase()}@wolt.com` : `${parts[0].toLowerCase()}@wolt.com`;
        document.getElementById("modal-emp-name").textContent = empName;
        document.getElementById("modal-emp-email").textContent = email;
        document.getElementById("modal-emp-realloc").textContent = info.canReallocate || "N/A";
        document.getElementById("modal-emp-prime").textContent = info.prime || "N/A";
        document.getElementById("modal-emp-pref").textContent = info.pref || "N/A";
        document.getElementById("modal-emp-languages").textContent = info.languages || "N/A";
        document.getElementById("modal-emp-capacity").textContent = info.capacity || "N/A";
        document.getElementById("modal-inbox-link").onclick = () => {
          window.open(generateInboxLink(info.id), "_blank");
        };
        document.getElementById("modal-admin-link").onclick = () => {
          window.open(generateAdminLink(info.id), "_blank");
        };
        document.getElementById("employee-modal").classList.add("show");
        document.getElementById("modal-overlay").classList.add("show");
      }
      function closeEmployeeModal() {
        document.getElementById("employee-modal").classList.remove("show");
        document.getElementById("modal-overlay").classList.remove("show");
      }

      const AIRCALL_API_KEY = "43bce092d80a09050211a837c0bbd705";
      const AIRCALL_API_SECRET = "092d2eb157c47614788386920acd7413";
      async function getAircallUserId(email) {
        const authString = btoa(`${AIRCALL_API_KEY}:${AIRCALL_API_SECRET}`);
        const url = `https://api.aircall.io/v1/users/${encodeURIComponent(email)}`;
        try {
          logDebug(`–ó–∞–ø—Ä–æ—Å Aircall ID –¥–ª—è email: ${email}`);
          const res = await fetch(url, { headers: { Authorization: `Basic ${authString}` } });
          if (!res.ok) { logDebug(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID Aircall: ${res.statusText}`); return null; }
          const data = await res.json();
          logDebug(`–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.user?.id}`);
          return data.user?.id || null;
        } catch (err) { logDebug("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Aircall ID: " + err); return null; }
      }
      async function getAircallAvailability(userId) {
        if (!userId) { logDebug("userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"); return "No ID"; }
        const authString = btoa(`${AIRCALL_API_KEY}:${AIRCALL_API_SECRET}`);
        const url = `https://api.aircall.io/v1/users/${userId}/availability`;
        try {
          logDebug(`–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ Aircall –¥–ª—è userId: ${userId}`);
          const res = await fetch(url, { headers: { Authorization: `Basic ${authString}` } });
          if (!res.ok) { logDebug(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Aircall: ${res.statusText}`); return "Error"; }
          const data = await res.json();
          let status = data?.user_availability?.availability_status || data?.availability;
          logDebug(`–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è userId ${userId}: ${status}`);
          return status || "Unknown";
        } catch (err) { logDebug("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ getAircallAvailability: " + err); return "Error"; }
      }
      function passReallocAndLang(empName) {
        const info = employeeData[empName];
        if (!info) return false;
        if (currentReallocFilter !== "all" && info.canReallocate !== currentReallocFilter) return false;
        if (currentLangFilter !== "all") {
          let lang = info.languages.replace(/\s+/g, "");
          if (currentLangFilter === "two") {
            if (!(lang.includes("üá¶üáø") && lang.includes("üá¨üáß")) || lang.includes("üá∑üá∫")) return false;
          } else if (currentLangFilter === "three") {
            if (!(lang.includes("üá¶üáø") && lang.includes("üá¨üáß") && lang.includes("üá∑üá∫"))) return false;
          }
        }
        return true;
      }
      function applyFilters() {
        const container = document.getElementById("platforms-container");
        container.innerHTML = "";
        platforms.forEach((platform) => {
          if (!currentPlatformFilter.includes("all") && !currentPlatformFilter.includes(platform.name)) return;
          if (platform.name !== "Aircall") {
            let activeNames = [];
            for (let r = platform.rowActiveNamesStart; r <= platform.rowActiveNamesEnd; r++) {
              const nm = fetchedData[r]?.[platform.colIndexNames]?.trim();
              if (nm) activeNames.push(nm);
            }
            let awayData = [];
            for (let r = platform.rowAwayNamesStart; r <= platform.rowAwayNamesEnd; r++) {
              const nm = fetchedData[r]?.[platform.colIndexNames]?.trim();
              if (!nm) continue;
              const rsn = fetchedData[r]?.[platform.colIndexData]?.trim() || "";
              awayData.push({ name: nm, reason: rsn });
            }
            if (currentSearchTerm) {
              activeNames = activeNames.filter((n) => n.toLowerCase().includes(currentSearchTerm.toLowerCase()));
              awayData = awayData.filter((item) => item.name.toLowerCase().includes(currentSearchTerm.toLowerCase()));
            }
            activeNames = activeNames.filter((n) => passReallocAndLang(n));
            awayData = awayData.filter((item) => passReallocAndLang(item.name));
            let showActive = true, showAway = true;
            if (currentStatusFilter === "active") showAway = false;
            else if (currentStatusFilter === "away") showActive = false;
            let html = `<div class="platform-card">
                          <h5>
                            <a href="${platform.url}" target="_blank" rel="noopener" title="Navigate to ${platform.name}">
                              ${platform.name}
                            </a>
                            <span class="info-icon" data-toggle="tooltip" title="${platformInfo[platform.name] || ""}">
                              <img src="https://www.svgrepo.com/show/474873/info.svg" alt="Info" style="width:16px; height:16px; cursor:pointer;" />
                            </span>
                          </h5>`;
            if (showActive) {
              if (activeNames.length === 0) {
                html += `<p><small style="color:red; font-weight:bold;">Active (0)</small>
                          <span data-toggle="tooltip" title="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" style="color:red; margin-left:5px; font-size:1.5rem;">&#9888;</span></p>`;
              } else {
                html += `<p><small>Active (${activeNames.length})</small></p><ul>`;
                const myName = "Mikhail Garayev";
                activeNames.forEach((n) => {
                  const isYou = n.trim().toLowerCase() === myName.toLowerCase();
                  const crown = isYou ? "üëë" : "";
                  const className = isYou ? "employee-item king" : "employee-item";
                  html += `<li class="${className}" data-employee="${n}">
                             <span class="employee-name">${n}</span> ${crown}
                           </li>`;
                });
                html += `</ul>`;
              }
            }
            if (showAway) {
              html += `<p><small>Away (${awayData.length})</small></p><ul>`;
              awayData.forEach((item) => {
                let reasonText = item.reason || "";
                let reasonClass = "";
                if (/(Break|BRB)/.test(reasonText)) {
                  const match = reasonText.match(/-([0-9]+:[0-9]{2}(?::[0-9]{2})?)/);
                  if (match) reasonClass = "break-overdue";
                }
                html += `<li class="employee-item ${reasonClass}" data-employee="${item.name}">${item.name}`;
                if (reasonText) html += ` (${reasonText})`;
                html += `</li>`;
              });
              html += `</ul>`;
            }
            html += `</div>`;
            container.innerHTML += html;
          } else {
            let filteredActive = aircallActive.slice().filter((n) => n.toLowerCase() !== "away");
            let filteredAway = aircallAway.slice().filter((item) => item.name.toLowerCase() !== "away");
            if (currentSearchTerm) {
              filteredActive = filteredActive.filter((n) => n.toLowerCase().includes(currentSearchTerm.toLowerCase()));
              filteredAway = filteredAway.filter((item) => item.name.toLowerCase().includes(currentSearchTerm.toLowerCase()));
            }
            filteredActive = filteredActive.filter((n) => passReallocAndLang(n));
            filteredAway = filteredAway.filter((item) => passReallocAndLang(item.name));
            let showActive = true, showAway = true;
            if (currentStatusFilter === "active") showAway = false;
            else if (currentStatusFilter === "away") showActive = false;
            renderAircallCardWithStatuses(filteredActive, filteredAway, showActive, showAway);
          }
        });

        const employeeItems = document.querySelectorAll(".employee-item");
        employeeItems.forEach((item) => {
          item.addEventListener("click", function () {
            const empName = this.getAttribute("data-employee");
            openEmployeeModal(empName);
          });
        });

        $('[data-toggle="tooltip"]').tooltip();
      }
      function renderAircallCardWithStatuses(activeList, awayList, showActive = true, showAway = true) {
        const aircallPlatform = platforms.find((p) => p.name === "Aircall");
        let html = `<div class="platform-card">
                      <h5>
                        <a href="${aircallPlatform.url}" target="_blank" rel="noopener" title="Navigate to Aircall">
                          Aircall
                        </a>
                        <span class="info-icon" data-toggle="tooltip" title="${platformInfo["Aircall"] || ""}">
                          <img src="https://www.svgrepo.com/show/474873/info.svg" alt="Info" style="width:16px; height:16px; cursor:pointer;" />
                        </span>
                      </h5>`;
        if (showActive) {
          if (activeList.length === 0) {
            html += `<p><small style="color:red; font-weight:bold;">Active (0)</small>
                      <span data-toggle="tooltip" title="No active employees" style="color:red; margin-left:5px; font-size:1.5rem;">&#9888;</span></p>`;
          } else {
            html += `<p><small>Active (${activeList.length})</small></p><ul id="aircall-active-list">` +
              activeList.map((n, index) => {
                const safeId = `aircall-active-${index}`;
                return `<li id="${safeId}" class="employee-item" data-employee="${n}">${n} - <span style="color:green;">Checking status...</span></li>`;
              }).join("") +
              `</ul>`;
          }
        }
        if (showAway) {
          html += `<p><small>Away (${awayList.length})</small></p><ul>` +
            awayList.map(a => {
              const extra = a.reason ? " - " + a.reason : "";
              return `<li class="employee-item" data-employee="${a.name}">${a.name}${extra}</li>`;
            }).join("") +
            `</ul>`;
        }
        html += `</div>`;
        document.getElementById("platforms-container").innerHTML += html;
      }
      function renderShiftSummary(data) {
        const tableEl = document.getElementById("summary-table");
        tableEl.innerHTML = "";
        const summaryCards = [
          { title: "On shift now", value: data[6][27] || "" },
          { title: "Should be", value: data[6][29] || "" },
          { title: "CS", value: data[6][31] || "", away: data[8][31] || "" },
          { title: "CS/Post Order", value: data[6][33] || "", away: data[8][33] || "" },
          { title: "PSR", value: data[6][35] || "", away: data[8][35] || "" },
          { title: "Venue", value: data[6][37] || "", away: data[8][37] || "" },
          { title: "Aircall", value: data[6][39] || "", away: data[8][39] || "" },
          { title: "Simo", value: data[6][41] || "", away: data[8][41] || "" },
          { title: "ST", value: data[6][43] || "", away: data[8][43] || "" },
          { title: "Not here", value: (data[8][29] || "") + (data[10][29] ? ", " + data[10][29] : ""), customClass: "small-font-card" },
          { title: "WNATS", value: (data[8][27] || "") + (data[10][27] ? ", " + data[10][27] : ""), customClass: "small-font-card" }
        ];
        let html = `<div class="shift-summary-cards-container" style="display:flex; flex-wrap:wrap; gap:10px; justify-content:center;">`;
        summaryCards.forEach((card) => {
          html += `<div class="shift-card ${card.customClass ? card.customClass : ""}" style="background: var(--card-bg-color); color: var(--text-color); border-radius:8px; box-shadow: var(--card-shadow); padding:16px; min-width:150px;">
                    <h6 class="shift-card-title">${card.title}</h6>
                    <div style="margin-bottom:0.5rem;">${card.value || ""}</div>`;
          if (card.away) { html += `<div class="shift-card-away"><strong>Away:</strong> ${card.away}</div>`; }
          html += `</div>`;
        });
        html += `</div>`;
        tableEl.innerHTML = html;
      }
      function renderResponsiblePeople(data) {
        if (!data || data.length === 0) return;
        const existing = document.getElementById("responsible-card");
        if (existing) existing.remove();
        let html = `<div class="shift-summary-card" id="responsible-card">
                      <div class="shift-summary-title">üë• Responsible People</div>
                      <table class="shift-summary-grid" style="max-width:500px; margin:0 auto;">
                        <thead>
                          <tr>
                            <th>Name</th>
                            <th>Position</th>
                          </tr>
                        </thead>
                        <tbody>`;
        data.forEach((row) => {
          const name = row[0]?.trim() || "";
          const role = row[1]?.trim() || "";
          if (name && role) {
            html += `<tr>
                      <td><span style="font-weight:bold;">${name}</span></td>
                      <td><span style="background:#e7f1ff; color:#0056b3; padding:2px 6px; border-radius:6px; font-size:0.85rem;">${role}</span></td>
                    </tr>`;
          }
        });
        html += `</tbody></table></div>`;
        const container = document.getElementById("shift-summary");
        container.insertAdjacentHTML("afterend", html);
      }
      async function fetchBreaksData() {
        window.allBreaksData = [];
        const data = await fetchSheetData(BREAKS_RANGE);
        if (!data) return;
        const breaksObjects = arrayToObjects(data);
        allBreaksData = breaksObjects;
        const now = new Date();
        const currMinutes = now.getHours() * 60 + now.getMinutes();
        let filteredBreaks = breaksObjects;
        if (currentBreakFilter === "upcoming") {
          const horizon = currMinutes + 60;
          filteredBreaks = breaksObjects.filter((item) => {
            if (!item["Break Time"]) return false;
            const timeStr = item["Break Time"].trim();
            const minutes = parseTimeToMinutes(timeStr);
            return minutes >= currMinutes && minutes <= horizon;
          });
          filteredBreaks.sort((a, b) => parseTimeToMinutes(a["Break Time"]) - parseTimeToMinutes(b["Break Time"]));
        } else if (currentBreakFilter === "all") {
          filteredBreaks.sort((a, b) => parseTimeToMinutes(a["Break Time"]) - parseTimeToMinutes(b["Break Time"]));
        }
        let html = `<div class="break-card">
                      <h5>${
                        currentBreakFilter === "upcoming"
                          ? "Upcoming breaks in the next hour"
                          : "All Breaks"
                      }</h5>
                      <ul>`;
        filteredBreaks.forEach((item) => {
          html += `<li>
                    <strong>${item["Name"]}</strong><br/>
                    Break at: <strong>${item["Break Time"]}</strong><br/>
                    Shift: ${item["Shift Start Time"]} | ${item["Working Space"]}
                  </li>`;
        });
        html += `</ul></div>`;
        document.getElementById("breaks-app").innerHTML = html;
      }
      function parseTimeToMinutes(timeStr) {
        timeStr = timeStr.trim();
        let parts = timeStr.split(":");
        if (parts.length < 2) return 0;
        let hours = parseInt(parts[0], 10);
        let minutes = parseInt(parts[1], 10);
        return hours * 60 + minutes;
      }
      function arrayToObjects(arr) {
        if (!arr.length) return [];
        const header = arr[0];
        return arr.slice(1).map((row) => {
          const obj = {};
          header.forEach((key, i) => { obj[key] = row[i] || ""; });
          return obj;
        });
      }
      async function fetchAircallStatuses() {
        const activeElements = document.querySelectorAll("[id^='aircall-active-']");
        for (let elem of activeElements) {
          const name = elem.textContent.split(" - ")[0].trim();
          const email = generateWoltEmail(name);
          const userId = await getAircallUserId(email);
          if (!userId) { elem.querySelector("span").textContent = "No ID"; continue; }
          const status = await getAircallAvailability(userId);
          elem.querySelector("span").textContent = status;
        }
      }
      let autoRefreshEnabled = true;
      let refreshInterval = 15;
      let refreshTimer = null;
      let countdownTimer = null;
      let countdownValue = refreshInterval;
      function resetAutoRefresh() {
        clearTimeout(refreshTimer);
        clearInterval(countdownTimer);
        countdownValue = refreshInterval;
        updateCountdownDisplay();
        refreshTimer = setTimeout(fetchData, refreshInterval * 1000);
        countdownTimer = setInterval(() => {
          countdownValue--;
          updateCountdownDisplay();
          if (countdownValue <= 0) clearInterval(countdownTimer);
        }, 1000);
      }
      function updateCountdownDisplay() {
        const countdownElem = document.getElementById("countdown");
        if (countdownElem) { countdownElem.textContent = countdownValue; }
      }
      function toggleAutoRefresh() {
        autoRefreshEnabled = !autoRefreshEnabled;
        const btn = document.getElementById("toggle-autorefresh");
        if (autoRefreshEnabled) { btn.textContent = "Disable Auto Refresh"; resetAutoRefresh(); }
        else { btn.textContent = "Enable Auto Refresh"; clearTimeout(refreshTimer); clearInterval(countdownTimer); }
      }
      function refreshNow() {
        document.getElementById("refresh-spinner").style.display = "inline-block";
        fetchData();
      }
      async function fetchData() {
        document.getElementById("refresh-spinner").style.display = "inline-block";
        const data = await fetchSheetData(RANGE);
        if (!data) { document.getElementById("refresh-spinner").style.display = "none"; return; }
        fetchedData = data;
        const shiftData = await fetchSheetData(SHIFT_RANGE);
        window.allShiftData = shiftData;
        await fetchEmployeeList();

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Aircall
        const aircallConfig = platforms.find(p => p.name === "Aircall");
        aircallActive = [];
        aircallAway = [];
        for (let r = aircallConfig.rowActiveNamesStart; r <= aircallConfig.rowActiveNamesEnd; r++) {
          const name = data[r]?.[aircallConfig.colIndexNames]?.trim();
          if (name) aircallActive.push(name);
        }
        for (let r = aircallConfig.rowAwayNamesStart; r <= aircallConfig.rowAwayNamesEnd; r++) {
          const name = data[r]?.[aircallConfig.colIndexNames]?.trim();
          const reason = data[r]?.[aircallConfig.colIndexData]?.trim() || "";
          if (name) aircallAway.push({ name, reason });
        }

        renderShiftSummary(data);
        const responsiblesData = await fetchSheetData(RESPONSIBLES_RANGE);
        renderResponsiblePeople(responsiblesData);
        fetchBreaksData();
        applyFilters();
        fetchAircallStatuses();

        document.getElementById("refresh-spinner").style.display = "none";
        if (autoRefreshEnabled) resetAutoRefresh();
      }
      function generateWoltEmail(name) {
        if (!name) return "";
        const parts = name.split(" ");
        return parts.length < 2 ? parts[0].toLowerCase() + "@wolt.com" : parts[0].toLowerCase() + "." + parts[1].toLowerCase() + "@wolt.com";
      }
      function loadThemePreference() {
        const saved = localStorage.getItem("darkThemeEnabled");
        if (saved === "true") {
          document.body.classList.add("dark-theme");
          const themeCheckbox = document.getElementById("theme-checkbox");
          if (themeCheckbox) themeCheckbox.checked = true;
        }
      }
      function toggleTheme(e) {
        const isDark = e.target.checked;
        document.body.classList.toggle("dark-theme", isDark);
        localStorage.setItem("darkThemeEnabled", isDark.toString());
      }
      $(document).ready(function () {
        $("#platform-dropdown").selectpicker();
        $("#platform-dropdown").on("changed.bs.select", function (e, clickedIndex, isSelected, previousValue) {
          let selected = $(this).val();
          currentPlatformFilter = selected && selected.length ? selected : ["all"];
          applyFilters();
        });
      });
      document.addEventListener("DOMContentLoaded", () => {
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–æ–∏—Å–∫–∞, –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –∏ —Ç.–¥.)
      loadThemePreference();
      
      document.getElementById("employee-search").addEventListener("input", function(e) {
        currentSearchTerm = e.target.value;
        applyFilters();
      });
      document.getElementById("status-filter").addEventListener("change", function(e) {
        currentStatusFilter = e.target.value;
        applyFilters();
      });
      document.getElementById("realloc-filter").addEventListener("change", function(e) {
        currentReallocFilter = e.target.value;
        applyFilters();
      });
      document.getElementById("lang-filter").addEventListener("change", function(e) {
        currentLangFilter = e.target.value;
        applyFilters();
      });
      document.getElementById("break-filter").addEventListener("change", function(e) {
        currentBreakFilter = e.target.value;
        fetchBreaksData();
      });
      
      const overlay = document.getElementById("modal-overlay");
      overlay.addEventListener("click", closeEmployeeModal);
      const modalClose = document.getElementById("modal-close");
      modalClose.addEventListener("click", closeEmployeeModal);
      document.getElementById("theme-checkbox").addEventListener("change", toggleTheme);

      // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ sidebar ===
      const toggleBtn = document.getElementById("toggle-sidebar");
      const sidebar = document.getElementById("sidebar");
      const mainContent = document.getElementById("main-content");
      const showSidebarBtn = document.getElementById("show-sidebar"); // –í–Ω–µ—à–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π

      toggleBtn.addEventListener("click", () => {
        // –°–∫—Ä—ã–≤–∞–µ–º sidebar
        sidebar.classList.toggle("hidden-sidebar");
        if (sidebar.classList.contains("hidden-sidebar")) {
          mainContent.classList.add("full-width");
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω—é—é –∫–Ω–æ–ø–∫—É-–≥–∞–º–±—É—Ä–≥–µ—Ä, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å sidebar
          showSidebarBtn.style.display = "block";
        } else {
          mainContent.classList.remove("full-width");
          showSidebarBtn.style.display = "none";
        }
      });

      // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è sidebar —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω—é—é –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π ===
      showSidebarBtn.addEventListener("click", () => {
        sidebar.classList.remove("hidden-sidebar");
        mainContent.classList.remove("full-width");
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ sidebar –≤–∏–¥–∏–º
        showSidebarBtn.style.display = "none";
      });
      
      // –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (fetchData, fetchWeather –∏ —Ç.–¥.)
      fetchData();
      fetchWeather();
    });

    </script>
  </body>
</html>
